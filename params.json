{"name":"Node-concept-net","tagline":"node.js interface to the ConceptNet semantic network API","body":"[![NPM version](https://badge.fury.io/js/concept-net.svg)](http://badge.fury.io/js/rstats)\r\n[![build status](https://secure.travis-ci.org/Planeshifter/node-concept-net.png)](http://travis-ci.org/Planeshifter/node-concept-net)\r\n\r\nnode-ConceptNet\r\n===============\r\n\r\nnode.js interface to the ConceptNet semantic network API. For further information, consult the website of the project: \r\n[http://conceptnet5.media.mit.edu/](http://conceptnet5.media.mit.edu/).\r\n\r\n\r\n# Introduction\r\n\r\nThe ConceptNet package can be easily installed via npm:\r\n\r\n```\r\nnpm install concept-net\r\n```\r\n\r\nTo require the module in a project, we can use the expression:\r\n\r\n```\r\nvar ConceptNet = require('concept-net');\r\n```\r\n\r\n# Getting Started \r\n\r\nThe module exports a single constructor which can be used to open an API connection. Simply call it an store the \r\nexpression result in a variable:\r\n\r\n```\r\nvar conceptNet = ConceptNet();\r\n```\r\n\r\nIn case that you are running an own copy of the ConceptNet server, the constructor takes the hostname of the\r\nserver as an optional argument. The default option evaluates to \"conceptnet5.media.mit.edu\".\r\n\r\nWe can then use the following three methods to query the ConceptNet API:\r\n\r\n## Methods \r\n\r\n### `.lookup(uri, [params], callback)`\r\n\r\nThis method expects a valid ConceptNet URI as its first argument. See [the documentation](https://github.com/commonsense/conceptnet5/wiki/URI-hierarchy).\r\nParams is an (optional) object that specifies the arguments of the GET request. It can have the keys *limit*, *offset* and\r\n*filter*. The callback function has two parameters: The *err* parameter will return error objects in case that something goes\r\nwrong during the function invocation. If the query is successfull, *err* is `undefined` and the *result* parameter holds the result set from the query. \r\n\r\nExample code: \r\n```\r\nconceptNet.lookup(\"/c/en/toast\",{\r\n\tlimit: 10,\r\n\toffset: 0,\r\n\tfilter: \"core\"}, function(err, result){\r\n\t // insert code here\r\n\t})\r\n```\r\n\r\n### `.search(params, callback)`\r\n\r\nThe search method takes a parameter object and hands the retrieved results to the callback function.\r\nThe official ConceptNet API documentation provides a full overview of the possible search parameters:\r\n[ConceptNet API documentation](https://github.com/commonsense/conceptnet5/wiki/API). \r\n\r\nExample code: \r\n```\r\nconceptNet.search({\r\ntext: \"donut\"}, function(err, result){\r\n\t // insert code here\r\n\t})\r\n```\r\n\r\n### `.association(input, [params], callback)`\r\n\r\nThe association method takes as its first input either a valid ConceptNet URI or a `/list/<language>/<term list>`\r\npath.\r\n\r\nExample code: \r\n```\r\nconceptNet.association(\"/c/en/hotdog\",{\r\n\tlimit: 10,\r\n\tfilter: \"/c/en/donut\"}, function(err, result){\r\n\t // insert code here\r\n\t})\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}