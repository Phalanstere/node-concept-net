{
  "name": "node-concept-net",
  "tagline": "node.js interface to the ConceptNet semantic network API",
  "body": "[![NPM version][npm-image]][npm-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Coverage Status][coveralls-image]][coveralls-url]\r\n[![Dependencies][dependencies-image]][dependencies-url]\r\n\r\nConceptNet\r\n===============\r\n\r\nnode.js interface to the ConceptNet semantic network API. For further information, consult the website of the project:\r\n[http://conceptnet5.media.mit.edu/](http://conceptnet5.media.mit.edu/).\r\n\r\n\r\n# Introduction\r\n\r\nThe ConceptNet package can be easily installed via npm:\r\n\r\n```\r\nnpm install concept-net\r\n```\r\n\r\nTo require the module in a project, we can use the expression:\r\n\r\n```javascript\r\nvar ConceptNet = require( 'concept-net' );\r\n```\r\n\r\n# Getting Started\r\n\r\nThe module exports a single constructor which can be used to open an API connection. Simply call it an store the\r\nexpression result in a variable:\r\n\r\n```javascript\r\nvar conceptNet = ConceptNet();\r\n```\r\n\r\nIn case that you are running an own copy of the ConceptNet server, the constructor takes the hostname of the\r\nserver as an optional argument. The default option evaluates to \"conceptnet5.media.mit.edu:80\".\r\n\r\n```javascript\r\nConceptNet( '<hostname>', '<port>', '<conceptnet version number>' );\r\n```\r\n\r\nExample:\r\n```javascript\r\nvar conceptNet = ConceptNet( '10.0.0.1', '10053', '5.3' );\r\n```\r\nNote you can modify only the version by just passing null to the first two arguments:\r\n\r\n```javascript\r\nvar conceptNet = ConceptNet( null, null, '5.3' );\r\n```\r\n\r\nWe can then use the following three methods to query the ConceptNet API:\r\n\r\n## Methods\r\n\r\n### `.lookup( uri[, params], callback )`\r\n\r\nThis method expects a valid ConceptNet URI as its first argument. See [the documentation](https://github.com/commonsense/conceptnet5/wiki/URI-hierarchy).\r\nParams is an (optional) object that specifies the arguments of the GET request. It can have the keys *limit*, *offset* and\r\n*filter*. The callback function has two parameters: The *err* parameter will return error objects in case that something goes\r\nwrong during the function invocation. If the query is successful, *err* is `undefined` and the *result* parameter holds the result set from the query.\r\n\r\nExample code:\r\n```javascript\r\nconceptNet.lookup( '/c/en/toast', {\r\n\tlimit: 10,\r\n\toffset: 0,\r\n\tfilter: 'core'\r\n}, function onDone( err, result ) {\r\n\t// insert code here\r\n})\r\n```\r\n\r\n### `.getURI( text[, language], callback )`\r\n\r\nThis method finds out what the [ConceptNet URI](https://github.com/commonsense/conceptnet5/wiki/API#uri-standardization) is for a given text, applying steps such as reducing English words to their root form. The `language` parameter can be supplied a code for the language to use. If only two arguments are supplied, `language` is set to the default value `en`.\r\n\r\nExample code:\r\n```javascript\r\nconceptNet.getURI( 'ground beef', 'en', function onDone( err, result ) {\r\n\t// insert code here\r\n})\r\n```\r\n\r\n### `.search( params, callback )`\r\n\r\nThe search method takes a parameter object and hands the retrieved results to the callback function.\r\nThe official ConceptNet API documentation provides a full overview of the possible search parameters:\r\n[ConceptNet API documentation](https://github.com/commonsense/conceptnet5/wiki/API#search).\r\n\r\nExample code:\r\n```javascript\r\nconceptNet.search({\r\n\tstart: '/c/en/donut'\r\n}, function onDone( err, result ) {\r\n\t// insert code here\r\n})\r\n```\r\n\r\n### `.association( input[, params], callback )`\r\n\r\nThe association method takes as its first input either a valid ConceptNet URI or a `/list/<language>/<term list>`\r\npath.\r\n\r\nExample code:\r\n```javascript\r\nconceptNet.association( '/c/en/hotdog', {\r\n\tlimit: 10,\r\n\tfilter: '/c/en/donut'\r\n}, function onDone( err, result ){\r\n\t// insert code here\r\n})\r\n```\r\n\r\n## Unit Tests\r\n\r\nRun tests via the command `npm test`\r\n\r\n---\r\n## License\r\n\r\n[MIT license](http://opensource.org/licenses/MIT).\r\n\r\n[npm-image]: https://badge.fury.io/js/concept-net.svg\r\n[npm-url]: http://badge.fury.io/js/concept-net\r\n\r\n[travis-image]: https://travis-ci.org/Planeshifter/node-concept-net.svg\r\n[travis-url]: https://travis-ci.org/Planeshifter/node-concept-net\r\n\r\n[coveralls-image]: https://img.shields.io/coveralls/Planeshifter/node-concept-net/master.svg\r\n[coveralls-url]: https://coveralls.io/r/Planeshifter/node-concept-net?branch=master\r\n\r\n[dependencies-image]: http://img.shields.io/david/Planeshifter/node-concept-net.svg\r\n[dependencies-url]: https://david-dm.org/Planeshifter/node-concept-net\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}